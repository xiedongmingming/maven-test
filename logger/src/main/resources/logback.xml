<?xml version="1.0" encoding="UTF-8"?>
<!--
	scan:
		当此属性设置为TRUE时,配置文件如果发生改变将会被重新加载(默认值为TRUE)
	scanPeriod:
		设置监测配置文件是否有修改的时间间隔,如果没有给出时间单位(默认单位是毫秒(当SCAN为TRUE时此属性生效(默认的时间间隔为1分钟)))
	debug:
		当此属性设置为TRUE时将打印出LOGBACK内部日志信息,实时查看LOGBACK运行状态(默认值为FALSE)
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    
    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="logs/log" />
    
    <!-- 定义日志文件名称 -->
    <property name="appName" value="netty"></property>
    
    <!-- 表示控制台输出  -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <Encoding>UTF-8</Encoding>
        
        <!--
        	日志输出格式:
        	%d:			表示日期时间
        	%thread:	表示线程名
			%-5level:	级别从左显示5个字符宽度
        	%logger{50} 表示LOGGER名字最长50个字符(否则按照句点分割)
        	%msg		日志消息
        	%n			是换行符
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
    </appender>

    <!-- 滚动记录文件:先将日志记录到指定文件(当符合某个条件时将日志记录到其他文件) -->  
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <Encoding>UTF-8</Encoding>
        
        <!-- 指定日志文件的名称 -->  
        <file>${LOG_HOME}/${appName}.log</file>
        
        <!--
        	当发生滚动时决定ROLLINGFILEAPPENDER的行为(涉及文件移动和重命名)
        	TimeBasedRollingPolicy:最常用的滚动策略(它根据时间来制定滚动策略,既负责滚动也负责发出滚动)
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            
            <!--
            	滚动时产生的文件的存放位置及文件名称
            	%d{yyyy-MM-dd}:	按天进行日志滚动 
				%i:				当文件大小超过MAXFILESIZE时按照I进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- 
            	可选节点:控制保留的归档文件的最大数量,超出数量就删除旧文件.假设设置每天滚动且MAXHISTORY是365,则只保存最近365天的文件,删除之前的旧文件.
            	注意:删除旧文件是那些为了归档而创建的目录也会被删除
            -->
            <MaxHistory>365</MaxHistory>
            
            <!-- 
            	当日志文件超过MAXFILESIZE指定的大小时根据上面提到的%I进行日志文件滚动
				注意此处配置SIZEDBASEDTRIGGERINGPOLICY是无法实现按文件大小进行滚动的,必须配置TIMEBASEDFILENAMINGANDTRIGGERINGPOLICY
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </layout>
    </appender>

    <!-- 
    	LOGGER主要用于存放日志对象(也可以定义日志类型、级别)
			name:		表示匹配的LOGGER类型前缀(也就是包的前半部分)
			level:		要记录的日志级别,包括TRACE<DEBUG<INFO<WARN<ERROR
			additivity:	作用在于CHILDREN-LOGGER是否使用ROOTLOGGER配置的APPENDER进行输出
						false：表示只用当前logger的appender-ref，
						true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!-- hibernate logger -->
    <logger name="org.hibernate" level="error" />
    <!-- spring framework logger -->
    <logger name="org.springframework" level="error" additivity="false"></logger>
    <logger name="com.creditease" level="info" additivity="true">
        <appender-ref ref="appLogAppender" />
    </logger>

    <!-- 
    	ROOT与LOGGER是父子关系,没有特别定义则默认为ROOT,任何一个类只会和一个LOGGER对应
    	要么是定义的LOGGER要么是ROOT,判断的关键在于找到这个logger，然后判断这个logger的appender和level。 
    -->
    <root level="info">
        <appender-ref ref="stdout" />
        <appender-ref ref="appLogAppender" />
    </root>
</configuration>