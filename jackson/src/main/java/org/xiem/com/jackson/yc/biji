Java下利用Jackson进行JSON解析和序列化
Java下常见的Json类库有Gson、JSON-lib和Jackson等，Jackson相对来说比较高效，在项目中主要使用Jackson进行JSON和Java对象转换，下面给出一些Jackson的JSON操作方法。
 一、准备工作
首先去官网下载Jackson工具包，下载地址http://wiki.fasterxml.com/JacksonDownload。
Jackson有1.x系列和2.x系列，截止目前2.x系列的最新版本是2.2.3，2.x系列有3个jar包需要下载：
jackson-core-2.2.3.jar（核心jar包，下载地址）
jackson-annotations-2.2.3.jar（该包提供Json注解支持，下载地址）
jackson-databind-2.2.3.jar（下载地址）

//JSON序列化和反序列化使用的User类  
    import java.util.Date;  
      
    public class User {  
        private String name;  
        private Integer age;  
        private Date birthday;  
        private String email;  
          
        public String getName() {  
            return name;  
        }  
        public void setName(String name) {  
            this.name = name;  
        }  
        public Integer getAge() {  
            return age;  
        }  
        public void setAge(Integer age) {  
            this.age = age;  
        }  
        public Date getBirthday() {  
            return birthday;  
        }  
        public void setBirthday(Date birthday) {  
            this.birthday = birthday;  
        }  
        public String getEmail() {  
            return email;  
        }  
        public void setEmail(String email) {  
            this.email = email;  
        }  
    }
二、JAVA对象转JSON[JSON序列化]
	import java.io.IOException;  
    import java.text.ParseException;  
    import java.text.SimpleDateFormat;  
      
    import com.fasterxml.jackson.databind.ObjectMapper;  
      
    public class JacksonDemo {  
        public static void main(String[] args) throws ParseException, IOException {  
            User user = new User();  
            user.setName("小民");   
            user.setEmail("xiaomin@sina.com");  
            user.setAge(20);  
            SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");  
            user.setBirthday(dateformat.parse("1996-10-01"));         
              
            /** 
             * ObjectMapper是JSON操作的核心，Jackson的所有JSON操作都是在ObjectMapper中实现。 
             * ObjectMapper有多个JSON序列化的方法，可以把JSON字符串保存File、OutputStream等不同的介质中。 
             * writeValue(File arg0, Object arg1)把arg1转成json序列，并保存到arg0文件中。 
             * writeValue(OutputStream arg0, Object arg1)把arg1转成json序列，并保存到arg0输出流中。 
             * writeValueAsBytes(Object arg0)把arg0转成json序列，并把结果输出成字节数组。 
             * writeValueAsString(Object arg0)把arg0转成json序列，并把结果输出成字符串。 
             */  
            ObjectMapper mapper = new ObjectMapper();  
              
            //User类转JSON  
            //输出结果：{"name":"小民","age":20,"birthday":844099200000,"email":"xiaomin@sina.com"}  
            String json = mapper.writeValueAsString(user);  
            System.out.println(json);  
              
            //Java集合转JSON  
            //输出结果：[{"name":"小民","age":20,"birthday":844099200000,"email":"xiaomin@sina.com"}]  
            List<User> users = new ArrayList<User>();  
            users.add(user);  
            String jsonlist = mapper.writeValueAsString(users);  
            System.out.println(jsonlist);  
        }  
    }  
三、JSON转Java类[JSON反序列化]

	import java.io.IOException;  
    import java.text.ParseException;  
    import com.fasterxml.jackson.databind.ObjectMapper;  
      
    public class JacksonDemo {  
        public static void main(String[] args) throws ParseException, IOException {  
            String json = "{\"name\":\"小民\",\"age\":20,\"birthday\":844099200000,\"email\":\"xiaomin@sina.com\"}";  
              
            /** 
             * ObjectMapper支持从byte[]、File、InputStream、字符串等数据的JSON反序列化。 
             */  
            ObjectMapper mapper = new ObjectMapper();  
            User user = mapper.readValue(json, User.class);  
            System.out.println(user);  
        }  
    }  
四、JSON注解
  Jackson提供了一系列注解，方便对JSON序列化和反序列化进行控制，下面介绍一些常用的注解。
  @JsonIgnore		此注解用于属性上，作用是进行JSON操作时忽略该属性。
  @JsonFormat		此注解用于属性上，作用是把Date类型直接转化为想要的格式，如@JsonFormat(pattern = "yyyy-MM-dd HH-mm-ss")。
  @JsonProperty		此注解用于属性上，作用是把该属性的名称序列化为另外一个名称，如把trueName属性序列化为name，@JsonProperty("name")。
	
	import java.util.Date;  
    import com.fasterxml.jackson.annotation.*;  
      
    public class User {  
        private String name;  
          
        //不JSON序列化年龄属性  
        @JsonIgnore   
        private Integer age;  
          
        //格式化日期属性  
        @JsonFormat(pattern = "yyyy年MM月dd日")  
        private Date birthday;  
          
        //序列化email属性为mail  
        @JsonProperty("mail")  
        private String email;  
          
        public String getName() {  
            return name;  
        }  
        public void setName(String name) {  
            this.name = name;  
        }  
          
        public Integer getAge() {  
            return age;  
        }  
        public void setAge(Integer age) {  
            this.age = age;  
        }  
          
        public Date getBirthday() {  
            return birthday;  
        }  
        public void setBirthday(Date birthday) {  
            this.birthday = birthday;  
        }  
          
        public String getEmail() {  
            return email;  
        }  
        public void setEmail(String email) {  
            this.email = email;  
        }  
    }  
      
      
      
    import java.io.IOException;  
    import java.text.ParseException;  
    import java.text.SimpleDateFormat;  
      
    import com.fasterxml.jackson.databind.ObjectMapper;  
      
    public class JacksonDemo {  
      
        public static void main(String[] args) throws ParseException, IOException {  
            User user = new User();  
            user.setName("小民");   
            user.setEmail("xiaomin@sina.com");  
            user.setAge(20);  
              
            SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");  
            user.setBirthday(dateformat.parse("1996-10-01"));         
              
            ObjectMapper mapper = new ObjectMapper();  
            String json = mapper.writeValueAsString(user);  
            System.out.println(json);  
            //输出结果：{"name":"小民","birthday":"1996年09月30日","mail":"xiaomin@sina.com"}  
        }  
    }
Json转List集合     
    
使用Jackson将json数组转list集合。
方法一：先转数组再转List
	Promotion[] myList = mapper.readValue(json, Promotion[].class);
   	List<Promotion> list = new ArrayList<Promotion>();  
   	Collections.addAll(list, myList);  

方法二：使用TypeReference直接转List
	List<Promotion> list = mapper.readValue(json, new TypeReference<List<Promotion>>() {         });   
注意：此TypeReference是个抽象类

参数中的新建表示创建一个新的类型


[Jackson]使用ObjectMapper对含有任意key的JSON进行反序列化
在调用某个RESTful API后，返回的JSON字符串中含有没有预先定义的key，和结构固定的JSON相比，它需要一些额外的操作。
对于结构固定的JSON，使用ObjectMapper结合某个预先定义的实体类型可以非常方便地完成反序列化工作，比如对下面这样的JSON：
GET /person/1
{
    "id": "1",
    "name": "dm_vincent",
    "age": "28"
}
结合一个实体类型，可以很轻松的完成反序列化工作：
public class Person {
    public long id;
    public String name;
    public int age;
}
public static <T> T getEntity(String jsonString, Class<T> prototype) {
    ObjectMapper objectMapper = new ObjectMapper();
    try {
		return (T) objectMapper.readValue(jsonString, prototype);
    } catch (IOException e) {
		e.printStackTrace();
    }
	return null;
}
但是在某些支持一次性获取多条记录的API中，就出现问题了。比如拥有下面这种格式的API：
GET /person/1,2,3
{
    "dm_vincent": {
        "id": "1",
        "name": "dm_vincent",
        "age": "28"
    },
    "dm_vincent2": {
        "id": "2",
        "name": "dm_vincent2",
        "age": "29"
    },
    "dm_vincent3": {
        "id": "3",
        "name": "dm_vincent3",
        "age": "30"
    }
}
虽然需要获取的实体类型还是那个Person类，可是这个时候就不像上面那样简单明了了。比如下面这段代码在反序列化的时候会出现问题：
public class PersonWrapper {
	public Map<String, Person> persons;
}
我们的意图是明确的，将返回的多个Person实体对象放到一个Map结构中。但是问题就在于返回的JSON中的keys是不固定的(比如上述JSON中的keys是人名)，这导致反序列化失败。
毕竟默认配置下的ObjectMapper也没有聪明到这种程度，能够猜测你是想要将多个实体放到Map中。正确的做法之一是使用ObjectMapper的readTree方法：
public static <T> EntityWrapper<T> getEntityWrapper(String jsonString, Class<T> prototype) {
    ObjectMapper objectMapper = new ObjectMapper();
    EntityWrapper<T> wrapper = new EntityWrapper<T>();
    try {
      	JsonNode root = objectMapper.readTree(jsonString);
      	
      	Iterator<Entry<String, JsonNode>> elements = root.fields();

      	while (elements.hasNext()) {
        	Entry<String, JsonNode> node = elements.next();
        	String key = node.getKey();
        	T element = objectMapper.readValue(node.getValue().toString(), prototype);
			wrapper.addEntry(key, element);
		}
		return wrapper;
    } catch (IOException e) {
		e.printStackTrace();
    }
	return null;
}
简单解释一下上述代码：

使用root.field()方法能够得到返回的JSON中的所有key-value对。然后循环提取某个键值对的key和value，对于value我们可以直接使用之前的策略进行反序列化，因为这部分的结构也是固定的。

忽略不需要的字段
有时候，返回的JSON字符串中含有我们并不需要的字段，那么当对应的实体类中不含有该字段时，会抛出一个异常，告诉你有些字段没有在实体类中找到。解决办法很简单，在声明ObjectMapper之后，
加上上述代码：

ObjectMapper objectMapper = new ObjectMapper();
objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);//当反序列化时有未识别的属性时不报错
